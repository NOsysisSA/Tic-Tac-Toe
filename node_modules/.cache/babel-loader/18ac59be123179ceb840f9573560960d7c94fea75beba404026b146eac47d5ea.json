{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misha\\\\Desktop\\\\lern\\\\TicTacToe\\\\tictactoe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\"; // Импорт React - библиотеки для работы с React компонентами.\nimport \"./style.css\"; // Импорт файла стилей (CSS) для стилизации компонентов.\nimport { useState } from \"react\"; // Импорт хука useState из React для работы с состоянием.\n\n// Компонент Square представляет отдельную клетку на игровом поле.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return (\n    /*#__PURE__*/\n    // Компонент выводит кнопку, на которую можно кликнуть.\n    _jsxDEV(\"button\", {\n      className: \"square\",\n      onClick: onSquareClick,\n      children: [value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// Компонент Board представляет игровое поле \"Крестики-нолики\".\n_c = Square;\nfunction Board() {\n  _s();\n  // Использование хук useState для создания состояния в компоненте.\n  const [xIsNext, setXIsNext] = useState(true); // Хранит информацию о том, чей ход следующий (X или O).\n  const [squares, setSquares] = useState(Array(9).fill(null)); // Хранит состояние игрового поля (массив из 9 клеток).\n\n  // Функция handleClick вызывается при клике на клетку.\n  function handleClick(i) {\n    // Если игра завершена (победитель определен) или клетка уже заполнена, то не делаем ничего.\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // Создаем копию массива squares для изменения состояния без мутации исходного массива.\n    const nextSquares = squares.slice();\n\n    // В зависимости от текущего игрока (xIsNext), устанавливаем значение \"X\" или \"O\" в выбранную клетку.\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // Обновляем состояние squares новым массивом, содержащим изменения.\n    setSquares(nextSquares);\n\n    // Переключаем текущего игрока (xIsNext) на следующего (X -> O или O -> X).\n    setXIsNext(!xIsNext);\n  }\n\n  // Проверяем, есть ли победитель в текущем состоянии игрового поля squares.\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner; // Если есть победитель, отображаем его имя.\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O'); // Иначе, показываем чей следующий ход (X или O).\n  }\n\n  return (\n    /*#__PURE__*/\n    // Рендеринг компонента Board.\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[0],\n          onSquareClick: () => handleClick(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[1],\n          onSquareClick: () => handleClick(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[2],\n          onSquareClick: () => handleClick(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[3],\n          onSquareClick: () => handleClick(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[4],\n          onSquareClick: () => handleClick(4)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[5],\n          onSquareClick: () => handleClick(5)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[6],\n          onSquareClick: () => handleClick(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[7],\n          onSquareClick: () => handleClick(7)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[8],\n          onSquareClick: () => handleClick(8)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n// Функция calculateWinner проверяет, есть ли победитель в переданном массиве клеток squares.\n_s(Board, \"coMecpjTzg1W7KUe5tSm+DrcByQ=\");\n_c2 = Board;\nfunction calculateWinner(squares) {\n  // Возможные выигрышные комбинации клеток на игровом поле.\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  // Проверяем каждую выигрышную комбинацию на совпадение значений в клетках.\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // Возвращаем значение победителя (X или O).\n    }\n  }\n\n  return null; // Если победителя нет, возвращаем null.\n}\n\n// Основной компонент App, который рендерит игровое поле.\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n}\n_c3 = App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","lines","length","a","b","c","App","_c3","$RefreshReg$"],"sources":["C:/Users/misha/Desktop/lern/TicTacToe/tictactoe/src/App.js"],"sourcesContent":["import React from \"react\"; // Импорт React - библиотеки для работы с React компонентами.\r\nimport \"./style.css\"; // Импорт файла стилей (CSS) для стилизации компонентов.\r\nimport { useState } from \"react\"; // Импорт хука useState из React для работы с состоянием.\r\n\r\n// Компонент Square представляет отдельную клетку на игровом поле.\r\nfunction Square({ value, onSquareClick }) {\r\n  return (\r\n    // Компонент выводит кнопку, на которую можно кликнуть.\r\n    <button className=\"square\" onClick={onSquareClick}>\r\n      {value} {/* Значение клетки (X или O) будет отображаться внутри кнопки. */}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Компонент Board представляет игровое поле \"Крестики-нолики\".\r\nfunction Board() {\r\n  // Использование хук useState для создания состояния в компоненте.\r\n  const [xIsNext, setXIsNext] = useState(true); // Хранит информацию о том, чей ход следующий (X или O).\r\n  const [squares, setSquares] = useState(Array(9).fill(null)); // Хранит состояние игрового поля (массив из 9 клеток).\r\n\r\n  // Функция handleClick вызывается при клике на клетку.\r\n  function handleClick(i) {\r\n    // Если игра завершена (победитель определен) или клетка уже заполнена, то не делаем ничего.\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    // Создаем копию массива squares для изменения состояния без мутации исходного массива.\r\n    const nextSquares = squares.slice();\r\n    \r\n    // В зависимости от текущего игрока (xIsNext), устанавливаем значение \"X\" или \"O\" в выбранную клетку.\r\n    if (xIsNext) {\r\n      nextSquares[i] = 'X';\r\n    } else {\r\n      nextSquares[i] = 'O';\r\n    }\r\n    \r\n    // Обновляем состояние squares новым массивом, содержащим изменения.\r\n    setSquares(nextSquares);\r\n    \r\n    // Переключаем текущего игрока (xIsNext) на следующего (X -> O или O -> X).\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  // Проверяем, есть ли победитель в текущем состоянии игрового поля squares.\r\n  const winner = calculateWinner(squares);\r\n  \r\n  let status;\r\n  if (winner) {\r\n    status = 'Winner: ' + winner; // Если есть победитель, отображаем его имя.\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O'); // Иначе, показываем чей следующий ход (X или O).\r\n  }\r\n\r\n  return (\r\n    // Рендеринг компонента Board.\r\n    <>\r\n      <div className=\"status\">{status}</div> {/* Отображение статуса игры (победитель или следующий игрок). */}\r\n      <div className=\"board-row\">\r\n        {/* Создание ряда клеток с помощью компонента Square, каждой передаем значение и обработчик клика. */}\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {/* Аналогично создаем второй ряд клеток. */}\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {/* Аналогично создаем третий ряд клеток. */}\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// Функция calculateWinner проверяет, есть ли победитель в переданном массиве клеток squares.\r\nfunction calculateWinner(squares) {\r\n  // Возможные выигрышные комбинации клеток на игровом поле.\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  \r\n  // Проверяем каждую выигрышную комбинацию на совпадение значений в клетках.\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]; // Возвращаем значение победителя (X или O).\r\n    }\r\n  }\r\n  return null; // Если победителя нет, возвращаем null.\r\n}\r\n\r\n// Основной компонент App, который рендерит игровое поле.\r\nexport default function App() {\r\n  return <Board />;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}